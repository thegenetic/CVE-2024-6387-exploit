#!/usr/bin/env python3

import nmap
import socket
import re
import threading
import argparse
from termcolor import colored

# List of vulnerable SSH versions
vulnerable_versions = [
    'SSH-2.0-OpenSSH_8.5p1',
    'SSH-2.0-OpenSSH_8.6p1',
    'SSH-2.0-OpenSSH_8.7p1',
    'SSH-2.0-OpenSSH_8.8p1',
    'SSH-2.0-OpenSSH_8.9p1',
    'SSH-2.0-OpenSSH_9.0p1',
    'SSH-2.0-OpenSSH_9.1p1',
    'SSH-2.0-OpenSSH_9.2p1',
    'SSH-2.0-OpenSSH_9.3p1',
    'SSH-2.0-OpenSSH_9.4p1',
    'SSH-2.0-OpenSSH_9.5p1',
    'SSH-2.0-OpenSSH_9.6p1',
    'SSH-2.0-OpenSSH_9.7p1'
]

# Global variable to store results
scan_results = {}

# Function to resolve domain to IP address
def resolve_domain(domain):
    try:
        ip_address = socket.gethostbyname(domain)
        return ip_address
    except socket.gaierror as e:
        print(f"Error: Could not resolve domain {domain}: {str(e)}")
        return None

# Function to scan SSH versions using Nmap with comprehensive port scanning
def scan_ssh_versions(domain, ip_address):
    try:
        nm = nmap.PortScanner()
        nm.scan(ip_address, arguments='-Pn -sV -p- --script ssh2-enum-algos,ssh-auth-methods,ssh-hostkey,ssh-run,sshv1')
        if ip_address in nm.all_hosts():
            if 'tcp' in nm[ip_address].all_protocols():
                for port in nm[ip_address]['tcp']:
                    port_state = nm[ip_address]['tcp'][port]['state']
                    if port_state == 'open':
                        ssh_version = nm[ip_address]['tcp'][port]['version']
                        print(f"[{domain}] SSH version detected on port {port}: {ssh_version}")
                        if is_vulnerable(ssh_version):
                            colored_version = colored(ssh_version, 'red', attrs=['bold'])
                        else:
                            colored_version = colored(ssh_version, 'yellow')
                        scan_results[(domain, port)] = colored_version
                if not any('SSH version detected' in result for result in scan_results.values()):
                    scan_results[(domain, 'none')] = colored('No SSH version detected on open ports', 'green')
            else:
                print(f"[{domain}] No TCP ports scanned or detected.")
        else:
            print(f"[{domain}] Host is down or not responsive to scanning.")
    except Exception as e:
        print(f"Error scanning {domain} ({ip_address}): {str(e)}")
        scan_results[(domain, 'error')] = f"Error: {str(e)}"

# Function to check if SSH version is vulnerable
def is_vulnerable(ssh_version):
    # Extract version from SSH banner
    match = re.search(r'OpenSSH_(\d+\.\d+p\d+)', ssh_version)
    if match:
        detected_version = match.group(1)
        return detected_version in vulnerable_versions
    return False

# Function to read domains from file
def read_domains_from_file(file_path):
    domains = []
    try:
        with open(file_path, 'r') as f:
            for line in f:
                domain = line.strip()
                if domain:
                    domains.append(domain)
        return domains
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        return []

# Function to perform threaded scanning
def threaded_scan(domains):
    threads = []
    for domain in domains:
        ip_address = resolve_domain(domain)
        if ip_address:
            print(f"Scanning {domain} ({ip_address})...")
            thread = threading.Thread(target=scan_ssh_versions, args=(domain, ip_address))
            threads.append(thread)
            thread.start()

    # Wait for all threads to complete
    for thread in threads:
        thread.join()

# Main function
def main(file_path):
    # Read domains from file
    domains = read_domains_from_file(file_path)
    if not domains:
        print("No domains to scan. Exiting.")
        return
    
    # Perform threaded scanning
    threaded_scan(domains)

    # Print results
    print("\nScan Results:")
    for (domain, port), result in scan_results.items():
        if "Error" in result:
            print(f"{domain} ({port}): {colored(result, 'red')}")
        elif "SSH version detected" in result:
            print(f"{domain} ({port}): {result}")
        elif "No SSH version detected" in result:
            print(f"{domain} ({port}): {result}")
        else:
            print(f"{domain} ({port}): {colored('No SSH version detected', 'green')}")

if __name__ == "__main__":
    # Argument parser setup
    parser = argparse.ArgumentParser(description="SSH Vulnerability Scanner using Nmap with comprehensive port scanning")
    parser.add_argument("file", help="File containing domains (one per line)")
    args = parser.parse_args()

    # Execute main function with file argument
    main(args.file)
