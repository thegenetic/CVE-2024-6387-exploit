import sys
import socket
import subprocess
from threading import Thread, Lock
from queue import Queue
from termcolor import colored

# Global variables
lock = Lock()
results = {}

# Function to perform Nmap scanning for SSH service on a domain
def scan_domain(domain, queue):
    try:
        ip_address = socket.gethostbyname(domain)
        print(f"Scanning {domain} ({ip_address})...")

        # Use Nmap to scan SSH service on multiple ports
        ports = "22,2222"  # Example ports, you can adjust as needed
        nmap_command = f"nmap -Pn -sV -p {ports} --script ssh2-enum-algos,ssh-auth-methods,ssh-hostkey,ssh-run,sshv1 {ip_address}"

        try:
            output = subprocess.check_output(nmap_command, shell=True, stderr=subprocess.STDOUT)
            process_nmap_output(domain, output.decode())
        except subprocess.CalledProcessError as e:
            print(f"Error scanning {domain}: {e.output.decode()}")
            results[domain] = f"Nmap Error: {e.output.decode()}"

    except socket.gaierror as e:
        print(f"Error: Could not resolve domain {domain}: {str(e)}")
        results[domain] = f"DNS resolution error: {str(e)}"

    queue.task_done()

# Function to process Nmap output and update results
def process_nmap_output(domain, output):
    vulnerable_versions = [
        'SSH-2.0-OpenSSH_8.5p1',
        'SSH-2.0-OpenSSH_8.6p1',
        'SSH-2.0-OpenSSH_8.7p1',
        'SSH-2.0-OpenSSH_8.8p1',
        'SSH-2.0-OpenSSH_8.9p1',
        'SSH-2.0-OpenSSH_9.0p1',
        'SSH-2.0-OpenSSH_9.1p1',
        'SSH-2.0-OpenSSH_9.2p1',
        'SSH-2.0-OpenSSH_9.3p1',
        'SSH-2.0-OpenSSH_9.4p1',
        'SSH-2.0-OpenSSH_9.5p1',
        'SSH-2.0-OpenSSH_9.6p1',
        'SSH-2.0-OpenSSH_9.7p1'
    ]

    if "Nmap scan report" in output:
        lines = output.splitlines()
        for line in lines:
            if "SSH" in line and "open" in line:
                parts = line.split()
                port = parts[0]
                version = parts[-1]
                if any(vuln_version in version for vuln_version in vulnerable_versions):
                    result = colored(version, 'red')
                else:
                    result = colored(version, 'yellow')
                lock.acquire()
                if domain not in results:
                    results[domain] = {}
                results[domain][port] = result
                lock.release()

# Function to scan domains from input file using threading
def scan_domains(input_file):
    queue = Queue()

    with open(input_file, 'r') as f:
        domains = f.read().strip().splitlines()

    # Start threads for scanning domains
    for domain in domains:
        queue.put(domain)
        t = Thread(target=scan_domain, args=(domain, queue))
        t.daemon = True
        t.start()

    # Wait for all threads to complete
    queue.join()

    # Print scan results
    print("\nScan Results:\n")
    for domain, data in results.items():
        print(f"{domain}:")
        if isinstance(data, str):
            print(data)
        else:
            for port, version in data.items():
                print(f"{port}: {version}")
            if not data:
                print("No SSH service detected on open ports")
        print()

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python ssh_vuln_scanner.py <input_file>")
        sys.exit(1)

    input_file = sys.argv[1]
    scan_domains(input_file)
